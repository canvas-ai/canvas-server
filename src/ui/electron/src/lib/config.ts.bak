import os from 'os';
import path from 'path';
import { machineIdSync } from 'node-machine-id';
import Conf from 'conf';

// Constants
const MACHINE_ID = machineIdSync(true);
const APP_ID = 'canvas-electron';

// Define paths for user configuration
const CANVAS_USER_HOME = os.platform() === 'win32' ?
    path.join(os.homedir(), 'Canvas') :
    path.join(os.homedir(), '.canvas');

const CANVAS_USER_CONFIG = path.join(CANVAS_USER_HOME, 'config');

// Configuration schema
interface ConfigSchema {
  server: {
    url: string;
    auth: {
      type: string;
      token: string;
    };
  };
  session: {
    context: {
      id: string;
      clientArray: string[];
    };
  };
  connectors: Record<string, any>;
  expandedNodes: string[];
}

// Default configuration
const DEFAULT_CONFIG: ConfigSchema = {
  server: {
    url: 'http://localhost:8001',
    auth: {
      type: 'token',
      token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU2YjgwZGU3LThkNjEtNGY2My1iMjU5LTlhOGRiMmY3MzlhZiIsImVtYWlsIjoibmV3dXNlckB0ZXN0LmNvbSIsInNlc3Npb25JZCI6IjhlYjdlZmQ1LTNhOWMtNDQwMC04MDQyLTc3OTk2MGE3ZjNkOCIsImlhdCI6MTc0MTY5NjA4MiwiZXhwIjoxNzQyMzAwODgyfQ.AMDZml1OFbHOmk1dIUgvnaWiD8TqjYb2Y-Wg2NeQUPY',
    },
  },
  session: {
    context: {
      id: `canvas-electron.${MACHINE_ID}`,
      clientArray: generateClientContextArray(),
    }
  },
  connectors: {
    ollama: {
      driver: 'ollama',
      host: 'http://localhost:11434',
      model: 'qwen2.5-coder:latest',
      defaultModel: 'qwen2.5-coder:latest',
    },
    docker: {
      driver: 'docker',
      host: 'unix:///var/run/docker.sock',
    },
  },
  expandedNodes: []
};

// Create config store directly with Conf
const store = new Conf<ConfigSchema>({
  projectName: 'canvas',
  configName: 'canvas-electron',
  cwd: CANVAS_USER_CONFIG,
  defaults: DEFAULT_CONFIG
});

/**
 * Generate client context array for the current machine
 */
function generateClientContextArray(): string[] {
  // Get network information
  let networkCidr = 'unknown';
  try {
    networkCidr = getNetworkCidr();
  } catch (error) {
    console.error('Error getting network CIDR:', error);
  }

  return [
    `client/app/${APP_ID}`,
    `client/device/${MACHINE_ID}`,
    `client/os/platform/${os.platform()}`,
    `client/os/arch/${os.arch()}`,
    `client/os/hostname/${os.hostname()}`,
    `client/os/user/${os.userInfo().username}`,
    `client/network/cidr/${networkCidr}`,
    `client/ephemeral/timezone/${Intl.DateTimeFormat().resolvedOptions().timeZone}`,
    `client/ephemeral/datetime/${new Date().toISOString()}`
  ];
}

/**
 * Get the network CIDR for the current machine
 */
function getNetworkCidr(): string {
  const interfaces = os.networkInterfaces();
  for (const [name, netInterface] of Object.entries(interfaces)) {
    if (netInterface) {
      for (const iface of netInterface) {
        if (iface.family === 'IPv4' && !iface.internal && iface.cidr) {
          return iface.cidr;
        }
      }
    }
  }
  return 'unknown';
}

// Electron-specific configuration interface
// This uses the Electron IPC bridge to access configuration from the main process

// Define the global ElectronAPI interface
declare global {
  interface Window {
    electronAPI: {
      config: {
        getAll: () => Promise<any>;
        getServerUrl: () => Promise<string>;
        getAuthToken: () => Promise<string>;
        setAuthToken: (token: string) => Promise<boolean>;
        getClientContext: () => Promise<string[]>;
        getExpandedNodes: () => Promise<string[]>;
        saveExpandedNodes: (nodeIds: string[]) => Promise<boolean>;
        getMachineId: () => Promise<string>;
        reset: () => Promise<boolean>;
      }
    }
  }
}

// Cache for configuration values to reduce IPC calls
const configCache: Record<string, any> = {};

// Default values for synchronous calls that need immediate results
const DEFAULT_VALUES = {
  serverUrl: 'http://localhost:8001',
  authToken: '',
};

/**
 * Config API for the Electron app
 * This is a client-side wrapper around the IPC-based configuration
 */
const config = {
  /**
   * Get the entire configuration
   */
  getAll: async (): Promise<any> => {
    if (!configCache.all) {
      try {
        configCache.all = await window.electronAPI.config.getAll();
      } catch (error) {
        console.error('Error getting config:', error);
        return {};
      }
    }
    return configCache.all;
  },

  /**
   * Get the server URL - async version
   */
  getServerUrl: async (): Promise<string> => {
    if (!configCache.serverUrl) {
      try {
        configCache.serverUrl = await window.electronAPI.config.getServerUrl();
      } catch (error) {
        console.error('Error getting server URL:', error);
        return DEFAULT_VALUES.serverUrl; // Fallback
      }
    }
    return configCache.serverUrl;
  },

  /**
   * Get the server URL - sync version (uses cached value or default)
   */
  getServerUrlSync: (): string => {
    return configCache.serverUrl || DEFAULT_VALUES.serverUrl;
  },

  /**
   * Get the authentication token - async version
   */
  getAuthToken: async (): Promise<string> => {
    try {
      // Don't cache auth token - always get fresh value
      const token = await window.electronAPI.config.getAuthToken();
      // Update the cache for sync access
      configCache.authToken = token;
      return token;
    } catch (error) {
      console.error('Error getting auth token:', error);
      return '';
    }
  },

  /**
   * Get the authentication token - sync version (uses cached value)
   */
  getAuthTokenSync: (): string => {
    return configCache.authToken || DEFAULT_VALUES.authToken;
  },

  /**
   * Set the authentication token
   */
  setAuthToken: async (token: string): Promise<void> => {
    try {
      await window.electronAPI.config.setAuthToken(token);
      // Update the cache
      configCache.authToken = token;
      // Clear the all cache since we modified a value
      delete configCache.all;
    } catch (error) {
      console.error('Error setting auth token:', error);
    }
  },

  /**
   * Get the client context array
   */
  getClientContext: async (): Promise<string[]> => {
    if (!configCache.clientContext) {
      try {
        configCache.clientContext = await window.electronAPI.config.getClientContext();
      } catch (error) {
        console.error('Error getting client context:', error);
        return [];
      }
    }
    return configCache.clientContext;
  },

  /**
   * Get the expanded nodes (for tree state preservation)
   */
  getExpandedNodes: async (): Promise<string[]> => {
    try {
      // Don't cache expanded nodes - always get fresh value
      return await window.electronAPI.config.getExpandedNodes();
    } catch (error) {
      console.error('Error getting expanded nodes:', error);
      return [];
    }
  },

  /**
   * Save expanded nodes state
   */
  saveExpandedNodes: async (nodeIds: string[]): Promise<void> => {
    try {
      await window.electronAPI.config.saveExpandedNodes(nodeIds);
    } catch (error) {
      console.error('Error saving expanded nodes:', error);
    }
  },

  /**
   * Get the machine ID
   */
  getMachineId: async (): Promise<string> => {
    if (!configCache.machineId) {
      try {
        configCache.machineId = await window.electronAPI.config.getMachineId();
      } catch (error) {
        console.error('Error getting machine ID:', error);
        return 'unknown';
      }
    }
    return configCache.machineId;
  },

  /**
   * Reset configuration to defaults
   */
  reset: async (): Promise<void> => {
    try {
      await window.electronAPI.config.reset();
      // Clear the cache after reset
      Object.keys(configCache).forEach(key => {
        delete configCache[key];
      });
    } catch (error) {
      console.error('Error resetting config:', error);
    }
  },

  /**
   * Clear the config cache
   */
  clearCache: (): void => {
    Object.keys(configCache).forEach(key => {
      delete configCache[key];
    });
  }
};

// Initialize auth token cache
config.getAuthToken().catch(console.error);

export default config;
