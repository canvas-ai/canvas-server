Before we dive into any implementation work, lets discuss the architecture of the main UI/UX feature of the canvas project called "Canvas"

A Canvas is a dynamic card-like UI element that has only 2 controls:
- a slick 18px x 112px colored button on the left edge of the card(color based on the workspace color we are in) - that, when hovered - extends and shows the current workspace/contextID (format is workspace.id/context.id if no workspace icon is defined, otherwise workspace.icon/context.id), when clicked it slides out to a full context tree sidebar, under the cursor the icon would change to the workspace icon so when clicked again, it would slideout once more to show the workspaces menu
- a small floating button at the top right of the card element to start talking to a LLM(implementation details will follow).

The initial idea for our small POC is as follows:
- User can create a canvas tied to a specific context (for example universe://work/mb/jira-123) - this is needed for RAG/grounding among other things - or create a default canvas tied to universe:///
- A canvas can be created by a authenticated user in 3 ways
  - just by mere opening of canvas.host.tld/canvases/:canvas_id (canvas_id can be "tv" or "phone", if no context array is submitted the default universe:/// is used, /rest/v2/canvases/:canvas_id is the REST API endpoint that should be called by the UI)
  - or by opening canvas.host.tld/contexts/:context_id/canvases/:canvas_id (REST API /rest/v2/contexts/:context_id/canvases/:canvas_id)
  - or in the UI > Create canvas(lets not waste time on this part yet)
- A default Canvas is a blank card element that is automatically connected to canvas-server using websockets waiting for commands what to display
- Canvas should support several widget-like "applets" to display and edit various data types whenever asked to do so,
a user should be able to ask his LLM agent "Show me todays emails", llm agent would run a query to canvas server, fetch emails based on the timeline filter and push them to the canvas UI element, canvas UI element should understand that it got a list containing emails, hence would appropriately display a email list.
- User may request to place the email list on the left of canvas and the detail of the email on the right
- User may request to place a list of todays notes on the right bottom of canvas, a youtube video with a eric clapton live concert on the top right and a list of his emails on the left side
- User may ask the LLM to move his concert video to the "tv" canvas - a canvas opened in a smart tv's browser by opening "canvas.domain.tld/canvases/tv" - which should "move" (close and reopen at the current time) the video on the "tv" canvas
- User may want to move from his PC to his phone, open a canvas on his phone and voice-control his canvases from there

The LLM architecture is to-be-discussed separately, but lets devise a architecture for canvas as the UI element, that has to dynamically support various data types and integrate tiling management (we should support tiling a-la windows metro UI with a focus on readability so vertical instead of horizontal preference);
Each canvas is an extension of the Context class hence will store its UI layout persistently. Of course there are many more features we could think of but lets focus on the basics to test the idea first - canvas as a universal UI to display

What would be the ideal architecture in this case. We may need a way to do canvas-server to canvas-server communication in the future but this may turn out not to be necessary, but please consider it in one of the architecture alternatives (lets say when comparing grpc vs websockets etc)

Please append a summary of the options we have into this file directly

===

## CANVAS ARCHITECTURE PROPOSALS

### 1. COMPONENT-BASED MODULAR ARCHITECTURE (RECOMMENDED)

#### Core Canvas Architecture
```
Canvas (extends Context)
├── CanvasController (state management, websocket handling)
├── LayoutManager (Metro-style tiling, vertical preference)
├── AppletRegistry (dynamic applet loading/management)
├── ContextBridge (workspace/context integration)
└── AppletContainer[] (individual widget instances)
    ├── EmailApplet
    ├── VideoApplet
    ├── NotesApplet
    ├── GenericDataApplet
    └── CustomApplets...
```

#### Key Components:

**Canvas Class (extends Context)**
- Persistent UI layout storage via Context inheritance
- Canvas-specific metadata (device_type, capabilities, theme)
- Real-time state synchronization across devices

**LayoutManager**
- Metro-style grid system with vertical preference
- Dynamic resizing and repositioning
- Responsive breakpoints for different devices (tv, phone, desktop)
- Layout persistence and restoration

**AppletRegistry**
- Dynamic applet discovery and loading
- Type-based applet selection (emails → EmailApplet)
- Lazy loading for performance
- Plugin-style architecture for extensibility

**Communication Layer**
- WebSocket primary channel for real-time updates
- REST API fallback for HTTP-only scenarios
- Message queue for cross-canvas communication

#### Advantages:
- Clean separation of concerns
- Extensible applet system
- Leverages existing Context infrastructure
- Type-safe data handling
- Easy testing and debugging

---

### 2. EVENT-DRIVEN REACTIVE ARCHITECTURE

#### Core Structure
```
Canvas EventBus
├── LayoutEvents (resize, move, add, remove)
├── DataEvents (fetch, update, delete)
├── NavigationEvents (context switch, workspace change)
└── CrossDeviceEvents (canvas transfer, sync)

AppletManager (reactive to events)
├── AppletFactory (creates applets based on data type)
├── AppletLifecycle (mount, update, unmount)
└── AppletCommunication (inter-applet messaging)
```

#### Communication Patterns:
- **Inbound**: WebSocket → EventBus → AppletManager → Applets
- **Outbound**: Applets → EventBus → WebSocket → canvas-server
- **Cross-Canvas**: EventBus → canvas-server → EventBus (other canvas)

#### Advantages:
- Highly decoupled components
- Easy to add new event types
- Natural fit for real-time updates
- Cross-device synchronization built-in

#### Disadvantages:
- More complex debugging
- Potential event storm scenarios
- Requires careful event ordering

---

### 3. MICRO-FRONTEND ARCHITECTURE

#### Structure
```
Canvas Shell (main container)
├── Workspace Navigation Micro-Frontend
├── LLM Chat Micro-Frontend
└── Dynamic Applet Micro-Frontends
    ├── @canvas/email-applet
    ├── @canvas/video-applet
    ├── @canvas/notes-applet
    └── @canvas/generic-data-applet
```

#### Implementation:
- Each applet as independent micro-frontend
- Module Federation or single-spa for orchestration
- Shared state via custom events or shared store
- Independent deployment and versioning

#### Advantages:
- Team independence for applet development
- Technology diversity (React, Vue, vanilla JS)
- Independent scaling and deployment
- Clear ownership boundaries

#### Disadvantages:
- Increased complexity
- Bundle size considerations
- Inter-applet communication complexity

---

### 4. COMMUNICATION PROTOCOL COMPARISON

#### WebSocket + REST Hybrid (RECOMMENDED)
```javascript
// Primary real-time channel
const canvasSocket = new WebSocket(`wss://canvas-server/canvases/${canvasId}`);

// Message types:
// - layout_update: Layout changes
// - applet_data: Data for applets
// - cross_canvas: Inter-canvas communication
// - llm_response: LLM agent responses

// REST fallback for:
// - Initial canvas creation
// - Authentication
// - File uploads
// - Non-real-time operations
```

**Advantages:**
- Real-time for UI updates
- Reliable for critical operations
- Bidirectional communication
- Low latency

#### gRPC + WebSocket Bridge
```javascript
// gRPC for canvas-server to canvas-server
// WebSocket bridge for browser compatibility
Canvas Server A ←→ gRPC ←→ Canvas Server B
       ↕                         ↕
   WebSocket                WebSocket
       ↕                         ↕
   Browser A                 Browser B
```

**Advantages:**
- Type-safe server-to-server communication
- Efficient binary protocol
- Built-in load balancing
- Strong consistency guarantees

**Disadvantages:**
- Browser compatibility requires bridge
- More complex infrastructure
- Overkill for current requirements

#### Server-Sent Events (SSE) + REST
**Advantages:**
- Simpler than WebSockets
- Automatic reconnection
- HTTP/2 multiplexing

**Disadvantages:**
- Uni-directional (server→client only)
- Limited browser connection pool

---

### 5. DATA FLOW & STATE MANAGEMENT

#### Option A: Centralized State (Redux-like)
```javascript
CanvasStore {
  layout: GridLayout,
  applets: AppletState[],
  context: ContextInfo,
  user: UserSession,
  cross_device_sync: SyncState
}

Actions: {
  ADD_APPLET, REMOVE_APPLET, MOVE_APPLET,
  UPDATE_DATA, SWITCH_CONTEXT, SYNC_CANVAS
}
```

#### Option B: Distributed State (Component-local)
```javascript
// Each applet manages its own state
// Canvas only manages layout and metadata
// Context provides shared state layer
```

#### Option C: Hybrid State
```javascript
// Global: layout, context, user session
// Local: applet-specific data and UI state
// Synchronized: cross-device state
```

---

### 6. CROSS-DEVICE SYNCHRONIZATION STRATEGIES

#### Real-time Sync (RECOMMENDED)
- WebSocket broadcasts layout/applet changes
- Optimistic updates with conflict resolution
- Device capability negotiation (TV vs phone vs desktop)

#### Periodic Sync
- Regular state snapshots to canvas-server
- Delta synchronization for efficiency
- Offline-first with sync on reconnection

#### Event Sourcing
- All changes as immutable events
- Event replay for state reconstruction
- Perfect audit trail and debugging

---

### 7. RECOMMENDED IMPLEMENTATION PATH

#### Phase 1: MVP (4-6 weeks)
1. **Canvas Core**: Basic Context extension with layout persistence
2. **Simple AppletRegistry**: Email, Notes, Generic Data applets
3. **WebSocket Communication**: Real-time updates
4. **Basic LayoutManager**: Simple grid system
5. **REST API**: Canvas CRUD operations

#### Phase 2: Enhanced Features (4-6 weeks)
1. **Advanced Layout**: Metro-style tiling, drag-drop
2. **Cross-device Sync**: Canvas transfer between devices
3. **LLM Integration**: Agent commands and responses
4. **Enhanced Applets**: Video, custom widgets
5. **Performance Optimization**: Lazy loading, caching

#### Phase 3: Scale & Polish (4-6 weeks)
1. **Multi-canvas Management**: Canvas-to-canvas communication
2. **Advanced Synchronization**: Conflict resolution, offline support
3. **Plugin System**: Third-party applet development
4. **Performance**: Virtual scrolling, memory optimization
5. **Testing & Documentation**: Comprehensive test suite

---

### 8. TECHNICAL DECISIONS SUMMARY

**RECOMMENDED STACK:**
- **Architecture**: Component-based Modular (Option 1)
- **Communication**: WebSocket + REST Hybrid
- **State Management**: Hybrid State (global layout + local applet state)
- **Synchronization**: Real-time with optimistic updates
- **Layout**: CSS Grid with Metro-style tiling library
- **Applet System**: Registry-based with lazy loading

**KEY REASONS:**
1. **Simplicity**: Leverages existing Context system
2. **Extensibility**: Easy to add new applet types
3. **Performance**: Efficient real-time updates
4. **Maintainability**: Clear separation of concerns
5. **Scalability**: Supports future canvas-to-canvas communication

This architecture balances simplicity with extensibility, providing a solid foundation for the Canvas MVP while supporting future advanced features.

===
